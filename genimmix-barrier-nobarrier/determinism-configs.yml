#testing a few methods to reduce nondeterminism caused by the adaptive optimisation system
includes:
  - "/home/claireh/running-ng/config/base/runbms.yml"

benchmarks:
  #dacapochopin-29a657f:
  dacapochopin-f480064:
    - avrora
    - batik
    - biojava
    - cassandra
    - eclipse
    - fop
    - graphchi
    - h2o
    - jme
    - jython
    - luindex
    - lusearch
    - pmd
    - sunflow
    - tomcat
    - xalan
    - zxing

overrides:
  "suites.dacapochopin-f480064.timing_iteration": 5
  "suites.dacapochopin-f480064.callback": "probe.DacapoChopinCallback"
  "suites.dacapochopin-f480064.minheap": GenImmix
  "suites.dacapochopin-f480064.timeout": 600
  "suites.dacapochopin-f480064.minheap_values.GenImmix":
    avrora: 8
    batik: 405
    biojava: 204
    cassandra: 77
    eclipse: 558
    fop: 23
    graphchi: 256
    h2o: 70
    jme: 236
    jython: 60
    luindex: 28
    lusearch: 26
    pmd: 383
    sunflow: 21
    tomcat: 55
    xalan: 13
    zxing: 431

runtimes:
# BarrierSelector set to NoBarrier
  no-bar:
    type: OpenJDK
    release: 11
    home: "/home/claireh/running-ng/builds/build_no_barrier/linux-x86_64-normal-server-release/jdk"
# BarrierSelector set to ObjectBarrier
  bar:
    type: OpenJDK
    release: 11
    home: "/home/claireh/running-ng/builds/build_barrier/linux-x86_64-normal-server-release/jdk" 

modifiers:
  probes_cp:
    type: JVMClasspath
    val: "/home/claireh/probes /home/claireh/probes/probes.jar"
  probes:
    type: JVMArg
    val: "-Djava.library.path=/home/claireh/probes -Dprobes=RustMMTk"
  min_nursery:
    type: EnvVar
    var: MMTK_MIN_NURSERY
    val: "{0}"
  max_nursery:
    type: EnvVar
    var: MMTK_MAX_NURSERY
    val: "{0}"
  nursery_size:
    type: ModifierSet
    val: "max_nursery-{0}|min_nursery-{0}"
  # lowers compiler threshold to 100 (should compile to lvl4 quickly)
  tier4threshold:
    type: JVMArg
    val: "-XX:Tier4CompileThreshold=100"
  # turns off tiered compilation
  notier:
    type: JVMArg
    val: "-XX:-TieredCompilation"
  # stops at level 4
  stopatlevel4:
    type: JVMArg
    val: "-XX:TieredStopAtLevel=4"

# compare normal (no shield) to lowered threshold to no tiered compilation
configs:
# normal
  #- "no-bar|ms|s|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432"
  #- "bar|ms|s|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432"
# lower threshold to 100
  - "no-bar|ms|s|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432|tier4threshold"
  - "bar|ms|s|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432|tier4threshold"
# stop at level 4
  - "no-bar|ms|s|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432|notier|stopatlevel4"
  - "bar|ms|s|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432|notier|stopatlevel4"
# c2 turns off tiered compilation & runs -Xcomp
  - "no-bar|ms|s|c2|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432"
  - "bar|ms|s|c2|mmtk_gc-GenImmix|tph|probes_cp|probes|nursery_size-33554432"





